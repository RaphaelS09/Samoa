# Sam(oa)Â² - SFCs and Adaptive Meshes for Oceanic And Other Applications
# Copyright (C) 2010 Oliver Meister, Kaveh Rahnema
# This program is licensed under the GPL, for details see the file LICENSE


#----------------------------------------------------------------#
# Compiler Flags                                                 #
#----------------------------------------------------------------#

# Usage: call "make [<scenario>] [<FLAG=VALUE>]*"
#
# make flags:
#  SCENARIO=DARCY|HEAT_EQ|SWE|TESTS|GENERIC
#  SWE_SOLVER=LAX_FRIEDRICHS|LAX_FRIEDRICHS_BATH|FWAVE|SSQ_FWAVE|AUG_JCP
#  TARGET=DEBUG|PROF|OPT
#  MPI=DEFAULT|MPICH2|OPENMPI|INTEL|NO
#  OPENMP=YES|TASKS|NO
#  STD_FORTRAN=YES|NO
#  ASAGI=STANDARD|NUMA|NO
#  ASAGI_TIMING=YES|NO
#  DEBUG_LEVEL = (0-7)
#  ASSERT = YES|NO
#  VEC_REPORT = (0-3)
#  ASAGI_DIR = <path>

#default compiler and compiler-specific flags

FFLAGS			= -I"./" -I"Samoa/" -cpp
EXEC 			= samoa

#default values for compilation switches

SCENARIO		= SWE
SWE_SOLVER		= AUG_RIEMANN
TARGET			= OPT
MPI 			= NO
OPENMP			= TASKS
STD_FORTRAN		= NO
ASAGI_TIMING	= NO
VEC_REPORT		= 0
ASAGI_DIR		= "./ASAGI"

#check switches, set flags of dependent switches and compiler flags accordingly

FC			= ifort
LOADER		= ifort


EXEC			= $(EXEC)_swe
FFLAGS			= $(FLAGS) -D_SWE
ASAGI			= NO
LIB 			= NO
EXEC			= $(EXEC)_noasagi



!IF "$(TARGET)" == "DEBUG"
EXEC		:= $(EXEC)_debug
DEBUG_LEVEL	= 3
ASSERT 		= YES
FFLAGS 		+= -g -O0 -traceback -check all -debug all -fpe0
LDFLAGS		+= -g -O0 -traceback -check all -debug all -fpe0
!ELSE IF "$(TARGET)" == "PROF"
EXEC		:= $(EXEC)_prof
DEBUG_LEVEL	= 1
ASSERT 		= NO
FFLAGS 		+= -g -trace -fast -inline-level=0 -funroll-loops -unroll
LDFLAGS 	+= -g -trace -O3 -ip -ipo
!ELSE IF "$(TARGET)" == "OPT"
DEBUG_LEVEL 	= 1
ASSERT 		= NO
FFLAGS 		= $(FLAGS) -fast -align all -inline-level=2 -no-inline-min-size -no-inline-max-size -no-inline-max-total-size -no-inline-max-per-routine -no-inline-max-per-compile -no-inline-factor -funroll-loops -unroll
LDFLAGS 	= $(LDFLAGS) -O3 -ip -ipo
!ELSE
(error Invalid value for TARGET: $(TARGET))
!ENDIF


FFLAGS 		= $(FLAGS) -D_DEBUG_LEVEL=$(DEBUG_LEVEL)


!IF "$(ASSERT)" == "YES"
FFLAGS 		= $(FLAGS) -D_ASSERT
!ELSE IF "$(ASSERT)" == "NO"

!ELSE
(error Invalid value for ASSERT: $(ASSERT))
!ENDIF


#----------------------------------------------------------------#
# BUILD RULES                                                    #
#----------------------------------------------------------------#

F90_SOURCES = \
SFC_main.f90 \
SFC_traversal.f90 \
Tests/Tests.f90 \
Tests/Tests_data_types.f90 \
Tests/Tests_initialize.f90 \
Tests/Tests_node_dummy_traversal.f90 \
Tests/Tests_consistency_traversal.f90 \
Tests/Tests_flops_traversal.f90 \
Tests/Tests_memory_traversal.f90 \
Tests/Tests_basis_functions.f90 \
Generic/Generic.f90 \
Generic/Generic_data_types.f90 \
Generic/Generic_initialize.f90 \
Generic/Generic_template.f90 \
Generic/Generic_adapt_template.f90 \
Darcy/Darcy.f90 \
Darcy/Darcy_local_function_spaces.f90 \
Darcy/Darcy_data_types.f90 \
Darcy/Darcy_basis.f90 \
Darcy/Darcy_node_dummy.f90 \
Darcy/Darcy_initialize.f90 \
Darcy/Darcy_output.f90 \
Darcy/Darcy_xml_output.f90 \
Darcy/Darcy_laplace_jacobi.f90 \
Darcy/Darcy_laplace_cg.f90 \
Darcy/Darcy_grad_p.f90 \
Darcy/Darcy_transport_eq.f90 \
Darcy/Darcy_permeability.f90 \
Darcy/Darcy_adapt.f90 \
Heat_Equation/Heat_Eq.f90 \
Heat_Equation/Heat_Eq_local_function_spaces.f90 \
Heat_Equation/Heat_Eq_data_types.f90 \
Heat_Equation/Heat_Eq_basis.f90 \
Heat_Equation/Heat_Eq_initialize.f90 \
Heat_Equation/Heat_Eq_output.f90 \
Heat_Equation/Heat_Eq_xml_output.f90 \
Heat_Equation/Heat_Eq_euler_timestep.f90 \
Heat_Equation/Heat_Eq_midpoint_timestep.f90 \
Heat_Equation/Heat_Eq_heun_timestep.f90 \
Heat_Equation/Heat_Eq_adapt.f90 \
SWE/SWE.f90 \
SWE/SWE_local_function_spaces.f90 \
SWE/SWE_data_types.f90 \
SWE/SWE_basis.f90 \
SWE/SWE_displace.f90 \
SWE/SWE_initialize.f90 \
SWE/SWE_output.f90 \
SWE/SWE_xml_output.f90 \
SWE/SWE_euler_timestep.f90 \
SWE/SWE_adapt.f90 \
geoclaw/c_bind_riemannsolvers.f90 \
Samoa/Samoa.f90 \
Samoa/Tools_quadrature_rule_base.f90 \
Solver/LinearSolver.f90 \
SFC_node_traversal.f90 \
SFC_edge_traversal.f90 \
SFC_data_types.f90 \
LIB_VTK_IO.f90\
M_kracken.f90\
Tools_noise.f90 \
Tools_log.f90 \
Conformity/Conformity.f90 \

F77_SOURCES = \
geoclaw/riemannsolvers.f

F90_OBJS = $(F90_SOURCES:.f90=.o)
F77_OBJS = $(F77_SOURCES:.f=.o)

#----------------------------------------------------------------#
# Build targets                                                  #
#----------------------------------------------------------------#

#default target

all: compile

#if a scenario was defined as target, recursively call make with the desired scenario as parameter

darcy:
	@$(MAKE) SCENARIO=DARCY

swe:
	@$(MAKE) SCENARIO=SWE

numa:
	@$(MAKE) SCENARIO=NUMA

heat_eq:
	@$(MAKE) SCENARIO=HEAT_EQ

tests:
	@$(MAKE) SCENARIO=TESTS

generic:
	@$(MAKE) SCENARIO=GENERIC

dirs:
	@mkdir -p bin output

compile: $(EXEC)
	@del /F $(F90_OBJS) $(F77_OBJS) *.mod

$(EXEC): $(F90_OBJS) $(F77_OBJS) dirs
	@$(LOADER) -o $@ $(F90_OBJS) $(F77_OBJS) $(LDFLAGS)

%.o: %.f90
	@$(FC) $(FFLAGS) -c -o $@ $<

%.o: %.f
	@$(FC) $(FFLAGS) -c -o $@ $<

clean:
	@del /F bin\* $(F90_OBJS) $(F77_OBJS) *.mod

!INCLUDE wdependency.mk
