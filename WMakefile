# Sam(oa)Â² - SFCs and Adaptive Meshes for Oceanic And Other Applications
# Copyright (C) 2010 Oliver Meister, Kaveh Rahnema
# This program is licensed under the GPL, for details see the file LICENSE


#----------------------------------------------------------------#
# Compiler Flags                                                 #
#----------------------------------------------------------------#

# Usage: call "make [<scenario>] [<FLAG=VALUE>]*"
#
# make flags:
#  SCENARIO=DARCY|HEAT_EQ|SWE|TESTS|GENERIC|FLASH
#  SWE_SOLVER=LF|LF_BATH|LLF|LLF_BATH|FWAVE|AUG_RIEMANN
#  TARGET=DEBUG|PROF|OPT
#  MPI=DEFAULT|MPICH2|OPENMPI|INTEL|NO
#  OPENMP=YES|TASKS|NO
#  STD_FORTRAN=YES|NO
#  ASAGI=STANDARD|NUMA|NO
#  ASAGI_TIMING=YES|NO
#  DEBUG_LEVEL = (0-7)
#  ASSERT = YES|NO
#  VEC_REPORT = (0-3)
#  ASAGI_DIR = <path>

#default compiler and compiler-specific flags

FFLAGS			= /I"./" /I"Samoa/" /fpp /nologo		#implicitnone-flag?
EXEC 			= samoa

#default values for compilation switches
!IF !DEFINED(ASAGI)
ASAGI			= NO
!ENDIF
!IF !DEFINED(SCENARIO)
SCENARIO		= SWE
!ENDIF
!IF !DEFINED(SWE_SOLVER)
SWE_SOLVER		= LLF_BATH
!ENDIF
!IF !DEFINED(TARGET)
TARGET			= OPT
!ENDIF
!IF !DEFINED(MPI)
MPI 			= NO
!ENDIF
!IF !DEFINED(OPENMP)
OPENMP			= YES			#alt: TASKS
!ENDIF
!IF !DEFINED(STD_FORTRAN)
STD_FORTRAN		= NO
!ENDIF
!IF !DEFINED(ASAGI_TIMING)
ASAGI_TIMING	= NO
!ENDIF
!IF !DEFINED(VEC_REPORT)
VEC_REPORT		= 0
!ENDIF
!IF !DEFINED(ASAGI_DIR)
ASAGI_DIR		= "./ASAGI"
!ENDIF


#check switches, set flags of dependent switches and compiler flags accordingly

!IF "$(MPI)" == "DEFAULT"
FC			= MPICH_F90=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" OMPI_FC=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" I_MPI_F90=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" mpif90
LOADER		= MPICH_F90=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" OMPI_FC=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" I_MPI_F90=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" mpif90
!ELSE IF "$(MPI)" == "OPENMPI"
FC			= OMPI_FC=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" mpif90.openmpi
LOADER		= OMPI_FC=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" mpif90.openmpi
!ELSE IF "$(MPI)" == "MPICH2"
FC			= MPICH_F90=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" mpif90.mpich2
LOADER		= MPICH_F90=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" mpif90.mpich2
!ELSE IF "$(MPI)" == "INTEL"
FC			= I_MPI_F90=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" mpif90.intel
LOADER		= I_MPI_F90=ifort -Qlocation,link,"$(VCINSTALLDIR)/bin" mpif90.intel
!ELSE IF "$(MPI)" == "NO"
FC			= ifort -Qlocation,link,"$(VCINSTALLDIR)/bin"			#the flag to find the ifort
LOADER		= ifort -Qlocation,link,"$(VCINSTALLDIR)/bin"
!ELSE
(error Invalid value for MPI: $(MPI))
!ENDIF


!IF "$(SCENARIO)" == "DARCY"
EXEC		= $(EXEC)_darcy
FFLAGS		= $(FFLAGS) /D_DARCY
!IF !DEFINED(ASAGI)
ASAGI		= STANDARD
!ENDIF
!IF !DEFINED(CREATE_LIB)
CREATE_LIB			= NO
!ENDIF
!ELSE IF "$(SCENARIO)" == "GENERIC"
EXEC 		= $(EXEC)_generic
FFLAGS		= $(FFLAGS) /D_GENERIC
!IF !DEFINED(ASAGI)
ASAGI		= NO
!ENDIF
!IF !DEFINED(CREATE_LIB)
CREATE_LIB			= YES
!ENDIF
!ELSE IF "$(SCENARIO)" == "SWE"
EXEC		= $(EXEC)_swe
FFLAGS		= $(FFLAGS) /D_SWE
!IF !DEFINED(ASAGI)
ASAGI		= STANDARD
!ENDIF
!IF !DEFINED(CREATE_LIB)
CREATE_LIB			= NO
!ENDIF
!ELSE IF "$(SCENARIO)" == "FLASH"
EXEC		= $(EXEC)_flash
FFLAGS		= $(FFLAGS) /D_FLASH
!IF !DEFINED(ASAGI)
ASAGI		= STANDARD
!ENDIF
!IF !DEFINED(CREATE_LIB)
CREATE_LIB			= NO
!ENDIF
!ELSE IF "$(SCENARIO)" == "HEAT_EQ"
EXEC		= $(EXEC)_heq
FFLAGS		= $(FFLAGS) /D_HEAT_EQ
!IF !DEFINED(ASAGI)
ASAGI		= NO
!ENDIF
!IF !DEFINED(CREATE_LIB)
CREATE_LIB			= NO
!ENDIF
!ELSE IF "$(SCENARIO)" == "TESTS"
EXEC		= $(EXEC)_tests
FFLAGS		= $(FFLAGS) /D_TESTS
!IF !DEFINED(ASAGI)
ASAGI		= NO
!ENDIF
!IF !DEFINED(CREATE_LIB)
CREATE_LIB			= NO
!ENDIF
!ELSE
(error Invalid value for SCENARIO: $(SCENARIO))
!ENDIF

!IF "$(OPENMP)" == "YES"
EXEC		= $(EXEC)_notasks
FFLAGS		= $(FFLAGS) /Qopenmp
LDFLAGS		= $(LDFLAGS) /Qopenmp /link /libpath:"C:\Program Files (x86)\Intel\Composer XE 2013\compiler\lib\intel64" /libpath:"C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\lib\amd64" /libpath:"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Lib\x64"
!ELSE IF "$(OPENMP)" == "TASKS"
FFLAGS		= $(FFLAGS) /Qopenmp /D_OPENMP_TASKS
LDFLAGS		= $(LDFLAGS) /Qopenmp /link /libpath:"C:\Program Files (x86)\Intel\Composer XE 2013\compiler\lib\intel64" /libpath:"C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\lib\amd64" /libpath:"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Lib\x64"
!ELSE IF "$(OPENMP)" == "NO"
EXEC		= $(EXEC)_noomp
FFLAGS		= $(FFLAGS) /Qopenmp_stubs
LDFLAGS		= $(LDFLAGS) /Qopenmp-stubs /link /libpath:"C:\Program Files (x86)\Intel\Composer XE 2013\compiler\lib\intel64" /libpath:"C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\lib\amd64" /libpath:"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Lib\x64"
!ELSE
(error Invalid value for OPENMP: $(OPENMP))
!ENDIF

#--------------im open mp bereich an ldflags angeklebt---------------
#LDFLAGS = /Qopenmp_stubs /link /libpath:"C:\Program Files (x86)\Intel\Composer XE 2013\compiler\lib\intel64" /libpath:"C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\lib\amd64" /libpath:"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Lib\x64"

!IF "$(MPI)" == "NO"
EXEC 		= $(EXEC)_nompi
!ELSE
FFLAGS		= $(FFLAGS) /D_MPI
!ENDIF

!IF "$(ASAGI)" == "STANDARD"
FFLAGS 		= $(FFLAGS) /D_ASAGI /I$(ASAGI_DIR)"/include"
LDFLAGS 	= $(LDFLAGS) "-Wl,-rpath,"$(ASAGI_DIR) /L$(ASAGI_DIR)
!IF "$(OPENMP)" == "NO"
LDFLAGS		= $(LDFLAGS) /lasagi_nomt
!ELSE
LDFLAGS		= $(LDFLAGS) /lasagi
!ENDIF
!ELSE IF "$(ASAGI)" == "NUMA"
FFLAGS 		= $(FFLAGS) /D_ASAGI /D_ASAGI_NUMA /I$(ASAGI_DIR)"/include"
LDFLAGS 	= $(LDFLAGS) "-Wl,-rpath,"$(ASAGI_DIR) /L$(ASAGI_DIR)
LDFLAGS		= $(LDFLAGS) /lasagi
!IF "$(OPENMP)" == "NO"
(error ASAGI must not be NUMA if OPENMP is NO)
!ENDIF
!ELSE IF "$(ASAGI)" == "NO"
EXEC		= $(EXEC)_noasagi
!ELSE
(error Invalid value for ASAGI: $(ASAGI))
!ENDIF

!IF "$(ASAGI_TIMING)" == "YES"
FFLAGS 		= $(FFLAGS) /D_ASAGI_TIMING
!IF "$(ASAGI)" == "NO"
(error ASAGI_TIMING must not be YES if ASAGI is NO)
!ENDIF
!ELSE IF "$(ASAGI_TIMING)" == "NO"
#nothing to do
!ELSE
(error Invalid value for ASAGI_TIMING: $(ASAGI_TIMING))
!ENDIF


!IF "$(SWE_SOLVER)" == "LF"
FFLAGS		= $(FFLAGS) /D_SWE_LF
EXEC		= $(EXEC)_lf
!ELSE IF "$(SWE_SOLVER)" == "LF_BATH"
FFLAGS		= $(FFLAGS) /D_SWE_LF_BATH
EXEC		= $(EXEC)_lfbath
!ELSE IF "$(SWE_SOLVER)" == "LLF"
FFLAGS		= $(FFLAGS) /D_SWE_LLF
EXEC		= $(EXEC)_llf
!ELSE IF "$(SWE_SOLVER)" == "LLF_BATH"
FFLAGS		= $(FFLAGS) /D_SWE_LLF_BATH
EXEC		= $(EXEC)_llfbath
!ELSE IF "$(SWE_SOLVER)" == "FWAVE"
FFLAGS		= $(FFLAGS) /D_SWE_FWAVE
EXEC		= $(EXEC)_fwave
!ELSE IF "$(SWE_SOLVER)" == "AUG_RIEMANN"
FFLAGS		= $(FFLAGS) /D_SWE_AUG_RIEMANN
!ELSE
(error Invalid value for SWE_SOLVER: $(SWE_SOLVER))
!ENDIF


!IF "$(TARGET)" == "DEBUG"
EXEC		= $(EXEC)_debug
!IF !DEFINED(DEBUG_LEVEL)
DEBUG_LEVEL	= 3
!ENDIF
!IF !DEFINED(ASSERT)
ASSERT 		= YES
!ENDIF
FFLAGS 		= $(FFLAGS) /Zi /Od /traceback /debug-parameters:all /check:all
!ELSE IF "$(TARGET)" == "PROF"									#possibly incorrect flags here, never tested - e.g. might not like the "/g"
EXEC 		= $(EXEC)_prof
!IF !DEFINED(DEBUG_LEVEL)
DEBUG_LEVEL = 1
!ENDIF
!IF !DEFINED(ASSERT)
ASSERT 		= NO
!ENDIF
FFLAGS		= $(FFLAGS) /g /trace /O3 /Ob0 /Qunroll
LDFLAGS		= $(LDFLAGS) /g /trace #/O3 /ip /ipo
!ELSE IF "$(TARGET)" == "OPT"
!IF !DEFINED(DEBUG_LEVEL)
DEBUG_LEVEL	= 1
!ENDIF
!IF !DEFINED(ASSERT)
ASSERT 		= NO
!ENDIF										#inline-flags auskommentiert zum schnelleren compilieren:
FFLAGS 		= $(FFLAGS) /O3 /align:all /Ob2 #/Qinline-min-size- /Qinline-max-size- /Qinline-max-total-size- /Qinline-max-per-routine- /Qinline-max-per-compile- /Qinline-factor- /Qunroll
#LDFLAGS 	= $(LDFLAGS) /O3 /ip /ipo
!ELSE
(error Invalid value for TARGET: $(TARGET))
!ENDIF

!IF !DEFINED(VEC_REPORT)
LDFLAGS 	= $(LDFLAGS) /vec-report$(VEC_REPORT)
!ENDIF

!IF !DEFINED(DEBUG_LEVEL)
FFLAGS 		= $(FFLAGS) /D_DEBUG_LEVEL=$(DEBUG_LEVEL)
!ENDIF

!IF "$(ASSERT)" == "YES"
FFLAGS 		= $(FFLAGS) /D_ASSERT
!ELSE IF "$(ASSERT)" == "NO"

!ELSE
(error Invalid value for ASSERT: $(ASSERT))
!ENDIF

!IF "$(STD_FORTRAN)" == "YES"
FFLAGS		= $(FFLAGS) /std
!ELSE IF "$(STD_FORTRAN)" == "NO"

!ELSE
(error Invalid value for STD_FORTRAN: $(STD_FORTRAN))
!ENDIF

!IF "$(CREATE_LIB)" == "YES"
EXEC		= $(EXEC).dll
FFLAGS		= $(FFLAGS) /fpic
LDFLAGS		= $(LDFLAGS) /fpic /shared
!ELSE IF "$(CREATE_LIB)" == "NO"
EXEC		= bin/$(EXEC).exe
!ELSE
(error Invalid value for CREATE_LIB: $(CREATE_LIB))
!ENDIF

#----------------------------------------------------------------#
# BUILD RULES                                                    #
#----------------------------------------------------------------#

F90_SOURCES = \
Config.f90 \
SFC_main.f90 \
SFC_traversal.f90 \
Tests\Tests.f90 \
Tests\Tests_data_types.f90 \
Tests\Tests_initialize.f90 \
Tests\Tests_node_dummy_traversal.f90 \
Tests\Tests_consistency_traversal.f90 \
Tests\Tests_flops_traversal.f90 \
Tests\Tests_memory_traversal.f90 \
Tests\Tests_basis_functions.f90 \
Generic\Generic.f90 \
Generic\Generic_data_types.f90 \
Generic\Generic_initialize.f90 \
Generic\Generic_template.f90 \
Generic\Generic_adapt_template.f90 \
Darcy\Darcy.f90 \
Darcy\Darcy_local_function_spaces.f90 \
Darcy\Darcy_data_types.f90 \
Darcy\Darcy_basis.f90 \
Darcy\Darcy_node_dummy.f90 \
Darcy\Darcy_initialize.f90 \
Darcy\Darcy_output.f90 \
Darcy\Darcy_xml_output.f90 \
Darcy\Darcy_laplace_jacobi.f90 \
Darcy\Darcy_laplace_cg.f90 \
Darcy\Darcy_grad_p.f90 \
Darcy\Darcy_transport_eq.f90 \
Darcy\Darcy_permeability.f90 \
Darcy\Darcy_adapt.f90 \
Heat_Equation\Heat_Eq.f90 \
Heat_Equation\Heat_Eq_local_function_spaces.f90 \
Heat_Equation\Heat_Eq_data_types.f90 \
Heat_Equation\Heat_Eq_basis.f90 \
Heat_Equation\Heat_Eq_initialize.f90 \
Heat_Equation\Heat_Eq_output.f90 \
Heat_Equation\Heat_Eq_xml_output.f90 \
Heat_Equation\Heat_Eq_euler_timestep.f90 \
Heat_Equation\Heat_Eq_midpoint_timestep.f90 \
Heat_Equation\Heat_Eq_heun_timestep.f90 \
Heat_Equation\Heat_Eq_adapt.f90 \
SWE\SWE.f90 \
SWE\SWE_local_function_spaces.f90 \
SWE\SWE_data_types.f90 \
SWE\SWE_basis.f90 \
SWE\SWE_displace.f90 \
SWE\SWE_initialize.f90 \
SWE\SWE_output.f90 \
SWE\SWE_xml_output.f90 \
SWE\SWE_ascii_output.f90 \
SWE\ascii_output.f90 \
SWE\SWE_euler_timestep.f90 \
SWE\SWE_adapt.f90 \
geoclaw\c_bind_riemannsolvers.f90 \
Samoa\Samoa.f90 \
Samoa\Tools_quadrature_rule_base.f90 \
Solver\LinearSolver.f90 \
SFC_node_traversal.f90 \
SFC_edge_traversal.f90 \
SFC_data_types.f90 \
LIB_VTK_IO.f90\
M_kracken.f90\
Tools_noise.f90 \
Tools_log.f90 \
Conformity\Conformity.f90 \

F77_SOURCES = \
geoclaw\riemannsolvers.f
geoclaw\riemannsolvers_sp.f

F90_OBJS = $(F90_SOURCES:.f90=.obj)
F77_OBJS = $(F77_SOURCES:.f=.obj)

#----------------------------------------------------------------#
# Build targets                                                  #
#----------------------------------------------------------------#

#default target

all: compile

#if a scenario was defined as target, recursively call make with the desired scenario as parameter

darcy:
	@$(MAKE) SCENARIO=DARCY

swe:
	@$(MAKE) SCENARIO=SWE

#flash:
#	@$(MAKE) SCENARIO=FLASH
#
numa:
	@$(MAKE) SCENARIO=NUMA

heat_eq:
	@$(MAKE) SCENARIO=HEAT_EQ

tests:
	@$(MAKE) SCENARIO=TESTS

generic:
	@$(MAKE) SCENARIO=GENERIC

dirs:
	@if not exist bin mkdir bin output

compile: $(EXEC)
	@del /F $(F90_OBJS) $(F77_OBJS) *.mod

$(EXEC): $(F90_OBJS) $(F77_OBJS) dirs
	@echo "Linking..." $(EXEC)
	@$(LOADER) /exe:$@ $(F90_OBJS) $(F77_OBJS) $(LDFLAGS)

.f90.obj:
	@echo "Compiling..." $<
	@$(FC) $(FFLAGS) /c /o $@ $<

.f.obj:
	@echo "Compiling..." $<
	@$(FC) $(FFLAGS) /c /o $@ $<

clean:
	@del /F bin\* $(F90_OBJS) $(F77_OBJS) *.mod

!INCLUDE wdependency.mk
